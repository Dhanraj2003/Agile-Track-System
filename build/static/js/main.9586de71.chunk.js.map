{"version":3,"sources":["context/UserContext.js","components/Scrum Details/ScrumDetails.js","components/Dashboard/Dashboard.js","components/Login/Login.js","components/UserProfile/UserProfile.js","components/Signup/SignUp.js","App.js","index.js"],"names":["UserContext","createContext","UserProvider","_ref","children","_useState","useState","_useState2","_slicedToArray","user","setUser","useEffect","loggedInUser","JSON","parse","localStorage","getItem","_jsx","Provider","value","login","userData","setItem","stringify","logout","removeItem","ScrumDetails","scrum","tasks","setTasks","_useState3","_useState4","users","setUsers","useContext","history","useHistory","push","fetchTasks","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","axios","get","concat","id","sent","data","t0","console","error","stop","apply","arguments","fetchUsers","_ref3","_callee2","scrumUsers","_context2","filter","some","task","assignedTo","length","handleStatusChange","_ref4","_callee3","taskId","newStatus","_context3","patch","status","_toConsumableArray","find","date","Date","toISOString","split","prevTasks","map","_objectSpread","_x","_x2","_jsxs","className","name","title","description","role","onChange","e","target","email","Dashboard","scrums","setScrums","selectedScrum","setSelectedScrum","_useState5","_useState6","showForm","setShowForm","_useState7","_useState8","_useState9","_useState10","newScrumName","setNewScrumName","_useState11","_useState12","newTaskTitle","setNewTaskTitle","_useState13","_useState14","newTaskDescription","setNewTaskDescription","_useState15","_useState16","newTaskStatus","setNewTaskStatus","_useState17","_useState18","newTaskAssignedTo","setNewTaskAssignedTo","fetchScrums","handleGetDetails","scrumId","handleAddScrum","_callee4","event","newScrumResponse","newScrum","updatedScrums","_context4","preventDefault","post","Container","Button","color","onClick","Card","CardBody","Form","onSubmit","FormGroup","Label","Input","type","placeholder","required","block","Row","Col","md","Login","formik","useFormik","initialValues","password","validationSchema","Yup","matches","_onSubmit","values","alert","style","width","padding","boxShadow","handleSubmit","errors","handleChange","UserProfile","selectedUser","setSelectedUser","newUserName","setNewUserName","newUserEmail","setNewUserEmail","newUserPassword","setNewUserPassword","newUserRole","setNewUserRole","userId","handleAddUser","updatedUsers","InputGroup","Control","Select","variant","ListGroup","Item","SignUp","Nav","_useContext","Link","to","_Fragment","App","Router","Switch","Route","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"uOAEMA,EAAcC,0BAEdC,EAAe,SAAHC,GAAsB,IAAhBC,EAAQD,EAARC,SACpBC,EAAwBC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAA/BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAEpBI,qBAAU,WACN,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,SACjDJ,GACAF,EAAQE,EAEhB,GAAG,IAYH,OACIK,cAACjB,EAAYkB,SAAQ,CAACC,MAAO,CAAEV,OAAMW,MAX3B,SAACC,GACXN,aAAaO,QAAQ,OAAQT,KAAKU,UAAUF,IAC5CX,EAAQW,EACZ,EAQgDG,OANjC,WACXT,aAAaU,WAAW,QACxBf,EAAQ,KACZ,GAGyDN,SAChDA,GAGb,EC+EesB,EAvGM,SAAHvB,GAAmB,IAAbwB,EAAKxB,EAALwB,MACpBtB,EAA0BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA/BuB,EAAKrB,EAAA,GAAEsB,EAAQtB,EAAA,GACtBuB,EAA0BxB,mBAAS,IAAGyB,EAAAvB,YAAAsB,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACdtB,EAASyB,qBAAWlC,GAApBS,KACF0B,EAAUC,cAEhBzB,qBAAU,WAEmBE,KAAKC,MAAMC,aAAaC,QAAQ,UAEjDmB,EAAQE,KAAK,SAKzB,GAAG,CAACF,IAEJxB,qBAAU,WACN,IAAM2B,EAAU,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,cAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEYC,IAAMC,IAAI,uCAADC,OAAwCxB,EAAMyB,KAAM,KAAD,EAA7ER,EAAQE,EAAAO,KACdxB,EAASe,EAASU,MAAMR,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAExBU,QAAQC,MAAM,wBAAuBX,EAAAS,IAAS,yBAAAT,EAAAY,OAAA,GAAAf,EAAA,kBAErD,kBAPe,OAAAJ,EAAAoB,MAAA,KAAAC,UAAA,KAShBtB,GACJ,GAAG,CAACX,EAAMyB,KAEVzC,qBAAU,WACN,IAAMkD,EAAU,eAAAC,EAAAtB,YAAAC,cAAAC,MAAG,SAAAqB,IAAA,IAAAnB,EAAAoB,EAAA,OAAAvB,cAAAI,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cAAAiB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAEYC,IAAMC,IAAI,+BAA+B,KAAD,EAAzDN,EAAQqB,EAAAZ,KACRW,EAAapB,EAASU,KAAKY,QAAO,SAAAzD,GAAI,OAAImB,EAAMuC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,aAAe5D,EAAK2C,EAAE,GAAC,IAC/FnB,EAAS+B,GAAYC,EAAAjB,KAAA,gBAAAiB,EAAAlB,KAAA,EAAAkB,EAAAV,GAAAU,EAAA,SAErBT,QAAQC,MAAM,wBAAuBQ,EAAAV,IAAS,yBAAAU,EAAAP,OAAA,GAAAK,EAAA,kBAErD,kBARe,OAAAD,EAAAH,MAAA,KAAAC,UAAA,KAUZhC,EAAM0C,OAAS,GACfT,GAER,GAAG,CAACjC,IAEJ,IAAM2C,EAAkB,eAAAC,EAAAhC,YAAAC,cAAAC,MAAG,SAAA+B,EAAOC,EAAQC,GAAS,OAAAlC,cAAAI,MAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,cAAA4B,EAAA7B,KAAA,EAAA6B,EAAA5B,KAAA,EAErCC,IAAM4B,MAAM,+BAAD1B,OAAgCuB,GAAU,CACvDI,OAAQH,EACRxC,QAAQ,GAADgB,OAAA4B,YACAnD,EAAMoD,MAAK,SAAAZ,GAAI,OAAIA,EAAKhB,KAAOsB,CAAM,IAAEvC,SAAO,CACjD,CACI2C,OAAQH,EACRM,MAAM,IAAIC,MAAOC,cAAcC,MAAM,KAAK,QAGnD,KAAD,EAEFvD,GAAS,SAAAwD,GAAS,OACdA,EAAUC,KAAI,SAAAlB,GAAI,OACdA,EAAKhB,KAAOsB,EAAMa,wBAAA,GAAQnB,GAAI,IAAEU,OAAQH,IAAcP,CAAI,GAC7D,IACHQ,EAAA5B,KAAA,eAAA4B,EAAA7B,KAAA,EAAA6B,EAAArB,GAAAqB,EAAA,SAEFpB,QAAQC,MAAM,8BAA6BmB,EAAArB,IAAS,wBAAAqB,EAAAlB,OAAA,GAAAe,EAAA,kBAE3D,gBArBuBe,EAAAC,GAAA,OAAAjB,EAAAb,MAAA,KAAAC,UAAA,KAuBxB,OACI8B,eAAA,OAAKC,UAAU,qCAAoCvF,SAAA,CAC/CsF,eAAA,MAAIC,UAAU,0BAAyBvF,SAAA,CAAC,qBAAmBuB,EAAMiE,QACjE3E,cAAA,MAAI0E,UAAU,6BAA4BvF,SAAC,UAC3Ca,cAAA,MAAI0E,UAAU,YAAWvF,SACpBwB,EAAM0D,KAAI,SAAAlB,GAAI,OACXsB,eAAA,MAAkBC,UAAU,uCAAsCvF,SAAA,CAC9DsF,eAAA,UAAAtF,SAAA,CAASgE,EAAKyB,MAAM,OAAU,IAAEzB,EAAK0B,YAAY,MAAG7E,cAAA,MAAAb,SAAKgE,EAAKU,SAC9C,WAAX,OAAJrE,QAAI,IAAJA,OAAI,EAAJA,EAAMsF,OACHL,eAAA,UACIC,UAAU,6CACVxE,MAAOiD,EAAKU,OACZkB,SAAU,SAACC,GAAC,OAAK1B,EAAmBH,EAAKhB,GAAI6C,EAAEC,OAAO/E,MAAM,EAACf,SAAA,CAE7Da,cAAA,UAAQE,MAAM,QAAOf,SAAC,UACtBa,cAAA,UAAQE,MAAM,cAAaf,SAAC,gBAC5Ba,cAAA,UAAQE,MAAM,OAAMf,SAAC,cAVxBgE,EAAKhB,GAaT,MAGbnC,cAAA,MAAI0E,UAAU,kCAAiCvF,SAAC,UAChDa,cAAA,MAAI0E,UAAU,YAAWvF,SACpB4B,EAAMsD,KAAI,SAAA7E,GAAI,OACXiF,eAAA,MAAkBC,UAAU,uCAAsCvF,SAAA,CAC7DK,EAAKmF,KAAK,KAAGnF,EAAK0F,MAAM,MADpB1F,EAAK2C,GAET,QAKzB,E,0FC+FegD,G,MAlMG,WAGd,IAAA/F,EAA4BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAjCgG,EAAM9F,EAAA,GAAE+F,EAAS/F,EAAA,GACxBuB,EAA0CxB,mBAAS,MAAKyB,EAAAvB,YAAAsB,EAAA,GAAjDyE,EAAaxE,EAAA,GAAEyE,EAAgBzE,EAAA,GACtC0E,EAAgCnG,oBAAS,GAAMoG,EAAAlG,YAAAiG,EAAA,GAAxCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,EAA0BvG,mBAAS,IAAGwG,EAAAtG,YAAAqG,EAAA,GAA/B7E,EAAK8E,EAAA,GAAE7E,EAAQ6E,EAAA,GACtBC,EAAwCzG,mBAAS,IAAG0G,EAAAxG,YAAAuG,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,EAAwC7G,mBAAS,IAAG8G,EAAA5G,YAAA2G,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,EAAoDjH,mBAAS,IAAGkH,EAAAhH,YAAA+G,EAAA,GAAzDE,EAAkBD,EAAA,GAAEE,EAAqBF,EAAA,GAChDG,EAA0CrH,mBAAS,SAAQsH,EAAApH,YAAAmH,EAAA,GAApDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GACtCG,EAAkDzH,mBAAS,IAAG0H,EAAAxH,YAAAuH,EAAA,GAAvDE,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GACtCvH,GAASyB,qBAAWlC,GAApBS,KAIRE,qBAAU,WACN,IAAMwH,EAAW,eAAAhI,EAAAqC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,cAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEWC,IAAMC,IAAI,gCAAgC,KAAD,EAA1DN,EAAQE,EAAAO,KACdiD,EAAU1D,EAASU,MAAMR,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAEzBU,QAAQC,MAAM,yBAAwBX,EAAAS,IAAS,yBAAAT,EAAAY,OAAA,GAAAf,EAAA,kBAEtD,kBAPgB,OAAAxC,EAAAwD,MAAA,KAAAC,UAAA,KASXC,EAAU,eAAAtB,EAAAC,YAAAC,cAAAC,MAAG,SAAAqB,IAAA,IAAAnB,EAAA,OAAAH,cAAAI,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cAAAiB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAEYC,IAAMC,IAAI,+BAA+B,KAAD,EAAzDN,EAAQqB,EAAAZ,KACdpB,EAASW,EAASU,MAAMW,EAAAjB,KAAA,gBAAAiB,EAAAlB,KAAA,EAAAkB,EAAAV,GAAAU,EAAA,SAExBT,QAAQC,MAAM,wBAAuBQ,EAAAV,IAAS,yBAAAU,EAAAP,OAAA,GAAAK,EAAA,kBAErD,kBAPe,OAAAxB,EAAAoB,MAAA,KAAAC,UAAA,KAShBuE,IACAtE,GACJ,GAAG,IAIH,IAAMuE,GAAgB,eAAAtE,EAAAtB,YAAAC,cAAAC,MAAG,SAAA+B,EAAO4D,GAAO,IAAAzF,EAAA,OAAAH,cAAAI,MAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,cAAA4B,EAAA7B,KAAA,EAAA6B,EAAA5B,KAAA,EAERC,IAAMC,IAAI,gCAADC,OAAiCkF,IAAW,KAAD,EAArEzF,EAAQgC,EAAAvB,KACdmD,EAAiB5D,EAASU,MAAMsB,EAAA5B,KAAA,gBAAA4B,EAAA7B,KAAA,EAAA6B,EAAArB,GAAAqB,EAAA,SAEhCpB,QAAQC,MAAM,gCAA+BmB,EAAArB,IAAS,yBAAAqB,EAAAlB,OAAA,GAAAe,EAAA,kBAE7D,gBAPqBe,GAAA,OAAA1B,EAAAH,MAAA,KAAAC,UAAA,KAShB0E,GAAc,eAAA9D,EAAAhC,YAAAC,cAAAC,MAAG,SAAA6F,EAAOC,GAAK,IAAAC,EAAAC,EAAAC,EAAA,OAAAlG,cAAAI,MAAA,SAAA+F,GAAA,cAAAA,EAAA7F,KAAA6F,EAAA5F,MAAA,OACP,OAAxBwF,EAAMK,iBAAkBD,EAAA7F,KAAA,EAAA6F,EAAA5F,KAAA,EAGWC,IAAM6F,KAAK,+BAAgC,CACtElD,KAAMqB,IACP,KAAD,EAIF,OANMwB,EAAgBG,EAAAvF,KAIhBqF,EAAWD,EAAiBnF,KAElCsF,EAAA5F,KAAA,EACMC,IAAM6F,KAAK,8BAA+B,CAC5CjD,MAAOwB,EACPvB,YAAa2B,EACb3C,OAAQ+C,EACRQ,QAASK,EAAStF,GAClBiB,WAAY4D,EACZ9F,QAAS,CACL,CACI2C,OAAQ+C,EACR5C,MAAM,IAAIC,MAAOC,cAAcC,MAAM,KAAK,OAGnD,KAAD,SAAAwD,EAAA5F,KAAA,GAE0BC,IAAMC,IAAI,gCAAgC,KAAD,GAA/DyF,EAAaC,EAAAvF,KACnBiD,EAAUqC,EAAcrF,MACxBsD,GAAY,GACZM,EAAgB,IAChBI,EAAgB,IAChBI,EAAsB,IACtBI,EAAiB,SACjBI,EAAqB,IAAIU,EAAA5F,KAAA,iBAAA4F,EAAA7F,KAAA,GAAA6F,EAAArF,GAAAqF,EAAA,SAEzBpF,QAAQC,MAAM,sBAAqBmF,EAAArF,IAAS,yBAAAqF,EAAAlF,OAAA,GAAA6E,EAAA,mBAWnD,gBA7CmB9C,GAAA,OAAAjB,EAAAb,MAAA,KAAAC,UAAA,KA+CpB,OACI8B,eAACqD,IAAS,CAACpD,UAAU,OAAMvF,SAAA,CACvBa,cAAA,MAAI0E,UAAU,mBAAkBvF,SAAC,gBACjB,WAAX,OAAJK,SAAI,IAAJA,QAAI,EAAJA,GAAMsF,OACHL,eAAA,OAAKC,UAAU,mBAAkBvF,SAAA,CAC7Ba,cAAC+H,IAAM,CAACC,MAAM,UAAUC,QAAS,kBAAMtC,GAAaD,EAAS,EAACvG,SACzDuG,EAAW,SAAW,kBAE1BA,GACG1F,cAACkI,IAAI,CAACxD,UAAU,OAAMvF,SAClBa,cAACmI,IAAQ,CAAAhJ,SACLsF,eAAC2D,IAAI,CAACC,SAAUhB,GAAelI,SAAA,CAC3BsF,eAAC6D,IAAS,CAAAnJ,SAAA,CACNa,cAACuI,IAAK,CAAApJ,SAAC,gBACPa,cAACwI,IAAK,CACFC,KAAK,OACLC,YAAY,mBACZxI,MAAO8F,EACPjB,SAAU,SAACC,GAAC,OAAKiB,EAAgBjB,EAAEC,OAAO/E,MAAM,EAChDyI,UAAQ,OAGhBlE,eAAC6D,IAAS,CAAAnJ,SAAA,CACNa,cAACuI,IAAK,CAAApJ,SAAC,gBACPa,cAACwI,IAAK,CACFC,KAAK,OACLC,YAAY,mBACZxI,MAAOkG,EACPrB,SAAU,SAACC,GAAC,OAAKqB,EAAgBrB,EAAEC,OAAO/E,MAAM,EAChDyI,UAAQ,OAGhBlE,eAAC6D,IAAS,CAAAnJ,SAAA,CACNa,cAACuI,IAAK,CAAApJ,SAAC,sBACPa,cAACwI,IAAK,CACFC,KAAK,OACLC,YAAY,yBACZxI,MAAOsG,EACPzB,SAAU,SAACC,GAAC,OAAKyB,EAAsBzB,EAAEC,OAAO/E,MAAM,EACtDyI,UAAQ,OAGhBlE,eAAC6D,IAAS,CAAAnJ,SAAA,CACNa,cAACuI,IAAK,CAAApJ,SAAC,iBACPsF,eAAC+D,IAAK,CACFC,KAAK,SACLvI,MAAO0G,EACP7B,SAAU,SAACC,GAAC,OAAK6B,EAAiB7B,EAAEC,OAAO/E,MAAM,EACjDyI,UAAQ,EAAAxJ,SAAA,CAERa,cAAA,UAAQE,MAAM,QAAOf,SAAC,UACtBa,cAAA,UAAQE,MAAM,cAAaf,SAAC,gBAC5Ba,cAAA,UAAQE,MAAM,OAAMf,SAAC,eAG7BsF,eAAC6D,IAAS,CAAAnJ,SAAA,CACNa,cAACuI,IAAK,CAAApJ,SAAC,eACPsF,eAAC+D,IAAK,CACFC,KAAK,SACLvI,MAAO8G,EACPjC,SAAU,SAACC,GAAC,OAAKiC,EAAqBjC,EAAEC,OAAO/E,MAAM,EACrDyI,UAAQ,EAAAxJ,SAAA,CAERa,cAAA,UAAQE,MAAM,GAAEf,SAAC,kBAChB4B,EAAMsD,KAAI,SAAC7E,GAAI,OACZiF,eAAA,UAAsBvE,MAAOV,EAAK2C,GAAGhD,SAAA,CAChCK,EAAKmF,KAAK,KAAGnF,EAAK0F,MAAM,MADhB1F,EAAK2C,GAET,UAIrBnC,cAAC+H,IAAM,CAACU,KAAK,SAAST,MAAM,UAAUY,OAAK,EAAAzJ,SAAC,2BAOpEa,cAAC6I,IAAG,CAACnE,UAAU,OAAMvF,SAChBiG,EAAOf,KAAI,SAAC3D,GAAK,OACdV,cAAC8I,IAAG,CAACC,GAAI,EAAkBrE,UAAU,OAAMvF,SACvCa,cAACkI,IAAI,CAAA/I,SACDsF,eAAC0D,IAAQ,CAAAhJ,SAAA,CACLa,cAAA,MAAAb,SAAKuB,EAAMiE,OACX3E,cAAC+H,IAAM,CAACC,MAAM,OAAOC,QAAS,kBAAMd,GAAiBzG,EAAMyB,GAAG,EAAChD,SAAC,sBAJ3DuB,EAAMyB,GASjB,MAGbmD,GAAiBtF,cAACS,EAAY,CAACC,MAAO4E,MAGnD,G,gBCnHe0D,EA3ED,WACV,IAAM9H,EAAUC,cACRhB,EAAUc,qBAAWlC,GAArBoB,MAEF8I,EAASC,YAAU,CACrBC,cAAe,CACXjE,MAAO,GACPkE,SAAU,IAEdC,iBAAkBC,IAAW,CACzBpE,MAAOoE,MACFC,QAAQ,IAAK,wBACbZ,SAAS,qBACTzD,MAAM,wBACXkE,SAAUE,MAAaX,SAAS,0BAEpCN,SAAS,WAAD,IAAAmB,EAAAjI,YAAAC,cAAAC,MAAE,SAAAC,EAAO+H,GAAM,IAAA9H,EAAAnC,EAAA,OAAAgC,cAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEQC,IAAMC,IAAI,qCAADC,OAAsCuH,EAAOvE,MAAK,cAAAhD,OAAauH,EAAOL,WAAY,KAAD,GAA3GzH,EAAQE,EAAAO,MACDC,KAAKgB,OAAS,GACjB7D,EAAOmC,EAASU,KAAK,GAC3BlC,EAAMX,GACN0B,EAAQE,KAAmB,UAAd5B,EAAKsF,KAAmB,IAAM,cAE3C4E,MAAM,6BACT7H,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAEDU,QAAQC,MAAM,oBAAmBX,EAAAS,IAAS,yBAAAT,EAAAY,OAAA,GAAAf,EAAA,kBAEjD,gBAAA6C,GAAA,OAAAiF,EAAA9G,MAAA,KAAAC,UAAA,EAbQ,KAgBb,OACI3C,cAAA,OAAK0E,UAAU,0DAAyDvF,SACpEa,cAACkI,IAAI,CAACyB,MAAO,CAAEC,MAAO,QAASC,QAAS,OAAQC,UAAW,mCAAoC3K,SAC3FsF,eAAC0D,IAAQ,CAAAhJ,SAAA,CACLa,cAAA,MAAI0E,UAAU,cAAavF,SAAC,UAC5BsF,eAAA,QAAM4D,SAAUY,EAAOc,aAAa5K,SAAA,CAChCsF,eAAA,OAAKC,UAAU,aAAYvF,SAAA,CACvBa,cAAA,SAAAb,SAAO,WACPa,cAAA,SACIyI,KAAK,QACL9D,KAAK,QACLD,UAAS,gBAAAxC,OAAkB+G,EAAOe,OAAO9E,MAAQ,aAAe,IAChEhF,MAAO+I,EAAOQ,OAAOvE,MACrBH,SAAUkE,EAAOgB,aACjBvB,YAAY,qBAEfO,EAAOe,OAAO9E,OAASlF,cAAA,KAAG0E,UAAU,cAAavF,SAAE8J,EAAOe,OAAO9E,WAEtET,eAAA,OAAKC,UAAU,kBAAiBvF,SAAA,CAC5Ba,cAAA,SAAAb,SAAO,cACPa,cAAA,SACIyI,KAAK,WACL9D,KAAK,WACLD,UAAS,gBAAAxC,OAAkB+G,EAAOe,OAAOZ,SAAW,aAAe,IACnElJ,MAAO+I,EAAOQ,OAAOL,SACrBrE,SAAUkE,EAAOgB,aACjBvB,YAAY,wBAEfO,EAAOe,OAAOZ,UAAYpJ,cAAA,KAAG0E,UAAU,cAAavF,SAAE8J,EAAOe,OAAOZ,cAEzEpJ,cAAC8H,IAAS,CAACpD,UAAU,mBAAkBvF,SACnCa,cAAA,UAAQyI,KAAK,SAAS/D,UAAU,kBAAiBvF,SAAC,eAG1DsF,eAAA,KAAGC,UAAU,mBAAkBvF,SAAA,CAAC,0BACLa,cAAA,UAAQ0E,UAAU,eAAeuD,QAAS,kBAAM/G,EAAQE,KAAK,UAAU,EAACjC,SAAC,qBAMxH,E,sDC2Ce+K,EAxHK,WAChB,IAAA9K,EAA0BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA/B2B,EAAKzB,EAAA,GAAE0B,EAAQ1B,EAAA,GACtBuB,EAA0BxB,mBAAS,IAAGyB,EAAAvB,YAAAsB,EAAA,GAA/BF,EAAKG,EAAA,GAAEF,EAAQE,EAAA,GACtB0E,EAAwCnG,mBAAS,MAAKoG,EAAAlG,YAAAiG,EAAA,GAA/C2E,EAAY1E,EAAA,GAAE2E,EAAe3E,EAAA,GACpCG,EAAgCvG,oBAAS,GAAMwG,EAAAtG,YAAAqG,EAAA,GAAxCF,EAAQG,EAAA,GAAEF,EAAWE,EAAA,GAC5BC,EAAsCzG,mBAAS,IAAG0G,EAAAxG,YAAAuG,EAAA,GAA3CuE,EAAWtE,EAAA,GAAEuE,EAAcvE,EAAA,GAClCG,EAAwC7G,mBAAS,IAAG8G,EAAA5G,YAAA2G,EAAA,GAA7CqE,EAAYpE,EAAA,GAAEqE,EAAerE,EAAA,GACpCG,EAA8CjH,mBAAS,IAAGkH,EAAAhH,YAAA+G,EAAA,GAAnDmE,EAAelE,EAAA,GAAEmE,EAAkBnE,EAAA,GAC1CG,EAAsCrH,mBAAS,YAAWsH,EAAApH,YAAAmH,EAAA,GAAnDiE,EAAWhE,EAAA,GAAEiE,EAAcjE,EAAA,GAC1BnH,EAASyB,qBAAWlC,GAApBS,KAERE,qBAAU,WACN,IAAMkD,EAAU,eAAA1D,EAAAqC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,cAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEYC,IAAMC,IAAI,+BAA+B,KAAD,EAAzDN,EAAQE,EAAAO,KACK,WAAX,OAAJ5C,QAAI,IAAJA,OAAI,EAAJA,EAAMsF,MACN9D,EAASW,EAASU,KAAKY,QAAO,SAAAzD,GAAI,MAAmB,WAAX,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMsF,KAAgB,MAE5DsF,EAAgB5K,GAChB6B,EAAe,OAAJ7B,QAAI,IAAJA,OAAI,EAAJA,EAAM2C,KACpBN,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAEDU,QAAQC,MAAM,wBAAuBX,EAAAS,IAAS,yBAAAT,EAAAY,OAAA,GAAAf,EAAA,kBAErD,kBAZe,OAAAxC,EAAAwD,MAAA,KAAAC,UAAA,KAahBC,GACJ,GAAG,CAACpD,IAEJ,IAAM6B,EAAU,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAqB,EAAO+H,GAAM,IAAAlJ,EAAA,OAAAH,cAAAI,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cAAAiB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAEDC,IAAMC,IAAI,0CAADC,OAA2C2I,IAAU,KAAD,EAA9ElJ,EAAQqB,EAAAZ,KACdxB,EAASe,EAASU,MAAMW,EAAAjB,KAAA,gBAAAiB,EAAAlB,KAAA,EAAAkB,EAAAV,GAAAU,EAAA,SAExBT,QAAQC,MAAM,wBAAuBQ,EAAAV,IAAS,yBAAAU,EAAAP,OAAA,GAAAK,EAAA,kBAErD,gBAPeyB,GAAA,OAAAjD,EAAAoB,MAAA,KAAAC,UAAA,KAiBVmI,EAAa,eAAAjI,EAAAtB,YAAAC,cAAAC,MAAG,SAAA+B,EAAO+D,GAAK,IAAAwD,EAAA,OAAAvJ,cAAAI,MAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,OACP,OAAvBwF,EAAMK,iBAAiBjE,EAAA7B,KAAA,EAAA6B,EAAA5B,KAAA,EAEbC,IAAM6F,KAAK,8BAA+B,CAC5ClD,KAAM0F,EACNnF,MAAOqF,EACPnB,SAAUqB,EACV3F,KAAM6F,IACP,KAAD,SAAAhH,EAAA5B,KAAA,EACyBC,IAAMC,IAAI,+BAA+B,KAAD,EAA7D8I,EAAYpH,EAAAvB,KAClBpB,EAAS+J,EAAa1I,KAAKY,QAAO,SAAAzD,GAAI,MAAmB,WAAX,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMsF,KAAgB,KAChEa,GAAY,GACZ2E,EAAe,IACfE,EAAgB,IAChBE,EAAmB,IACnBE,EAAe,YAAYjH,EAAA5B,KAAA,iBAAA4B,EAAA7B,KAAA,GAAA6B,EAAArB,GAAAqB,EAAA,SAE3BpB,QAAQC,MAAM,qBAAoBmB,EAAArB,IAAS,yBAAAqB,EAAAlB,OAAA,GAAAe,EAAA,mBAElD,gBAnBkBgB,GAAA,OAAA3B,EAAAH,MAAA,KAAAC,UAAA,KAqBnB,OACI8B,eAACqD,IAAS,CAACpD,UAAU,OAAMvF,SAAA,CACvBa,cAAA,MAAI0E,UAAU,mBAAkBvF,SAAC,kBACjB,WAAX,OAAJK,QAAI,IAAJA,OAAI,EAAJA,EAAMsF,OACHL,eAACyD,IAAI,CAACxD,UAAU,qBAAoBvF,SAAA,CAChCa,cAAC+H,IAAM,CAACE,QAAS,kBAAMtC,GAAaD,EAAS,EAAEhB,UAAU,gBAAevF,SACnEuG,EAAW,SAAW,iBAE1BA,GACGjB,eAAC2D,IAAI,CAACC,SAAUyC,EAAepG,UAAU,OAAMvF,SAAA,CAC3Ca,cAACgL,IAAU,CAACtG,UAAU,OAAMvF,SACxBa,cAACoI,IAAK6C,QAAO,CAACvC,YAAY,OAAOxI,MAAOmK,EAAatF,SAAU,SAACC,GAAC,OAAKsF,EAAetF,EAAEC,OAAO/E,MAAM,EAAEyI,UAAQ,MAElH3I,cAACgL,IAAU,CAACtG,UAAU,OAAMvF,SACxBa,cAACoI,IAAK6C,QAAO,CAACvC,YAAY,QAAQD,KAAK,QAAQvI,MAAOqK,EAAcxF,SAAU,SAACC,GAAC,OAAKwF,EAAgBxF,EAAEC,OAAO/E,MAAM,EAAEyI,UAAQ,MAElI3I,cAACgL,IAAU,CAACtG,UAAU,OAAMvF,SACxBa,cAACoI,IAAK6C,QAAO,CAACvC,YAAY,WAAWD,KAAK,WAAWvI,MAAOuK,EAAiB1F,SAAU,SAACC,GAAC,OAAK0F,EAAmB1F,EAAEC,OAAO/E,MAAM,EAAEyI,UAAQ,MAE9I3I,cAACgL,IAAU,CAACtG,UAAU,OAAMvF,SACxBsF,eAAC2D,IAAK8C,OAAM,CAAChL,MAAOyK,EAAa5F,SAAU,SAACC,GAAC,OAAK4F,EAAe5F,EAAEC,OAAO/E,MAAM,EAAEyI,UAAQ,EAAAxJ,SAAA,CACtFa,cAAA,UAAQE,MAAM,WAAUf,SAAC,aACzBa,cAAA,UAAQE,MAAM,QAAOf,SAAC,eAG9Ba,cAAC+H,IAAM,CAACU,KAAK,SAAS0C,QAAQ,UAAShM,SAAC,mBAGhDa,cAACoL,IAAS,CAAAjM,SACL4B,EAAMsD,KAAI,SAAA7E,GAAI,OACXiF,eAAC2G,IAAUC,KAAI,CAAgB3G,UAAU,oDAAmDvF,SAAA,CACnF,OAAJK,QAAI,IAAJA,OAAI,EAAJA,EAAMmF,KAAK,MAAQ,OAAJnF,QAAI,IAAJA,OAAI,EAAJA,EAAM0F,MACtBlF,cAAC+H,IAAM,CAACoD,QAAQ,UAAUlD,QAAS,kBA1DrC4C,EA0DgE,OAAJrL,QAAI,IAAJA,OAAI,EAAJA,EAAM2C,GAzDxFiI,EAAgBrJ,EAAMgD,MAAK,SAAAvE,GAAI,OAAQ,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAM2C,MAAO0I,CAAM,UACtDxJ,EAAWwJ,GAFU,IAACA,CA0DqE,EAAC1L,SAAC,kBAFhD,OAAJK,QAAI,IAAJA,OAAI,EAAJA,EAAM2C,GAGV,SAKhCgI,GACG1F,eAACyD,IAAI,CAACxD,UAAU,qBAAoBvF,SAAA,CAChCsF,eAAA,MAAAtF,SAAA,CAAI,mBAAiBgL,EAAaxF,QAClC3E,cAACoL,IAAS,CAAAjM,SACLwB,EAAM0D,KAAI,SAAAlB,GAAI,OACXsB,eAAC2G,IAAUC,KAAI,CAAe3G,UAAU,oDAAmDvF,SAAA,CACvFa,cAAA,UAAAb,SAASgE,EAAKyB,QAAe,MAAIzB,EAAK0B,YAAY,aAAW1B,EAAKU,OAAO,MADxDV,EAAKhB,GAET,WAO7C,EC3BemJ,EAxFA,WACX,IAAMpK,EAAUC,cAEV8H,EAASC,YAAU,CACrBC,cAAe,CACXxE,KAAM,GACNO,MAAO,GACPkE,SAAU,IAEdC,iBAAkBC,IAAW,CACzB3E,KAAM2E,MAAaX,SAAS,oBAC5BzD,MAAOoE,MACFC,QAAQ,IAAK,wBACbZ,SAAS,qBACTzD,MAAM,wBACXkE,SAAUE,MAAaX,SAAS,0BAEpCN,SAAS,WAAD,IAAAmB,EAAAjI,YAAAC,cAAAC,MAAE,SAAAC,EAAO+H,GAAM,OAAAjI,cAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAETC,IAAM6F,KAAK,8BAA+B,CAC5ClD,KAAM8E,EAAO9E,KACbO,MAAOuE,EAAOvE,MACdkE,SAAUK,EAAOL,SACjBtE,KAAM,aACP,KAAD,EACF4E,MAAM,qBACNxI,EAAQE,KAAK,UAAUS,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAEvBU,QAAQC,MAAM,oBAAmBX,EAAAS,IAAS,yBAAAT,EAAAY,OAAA,GAAAf,EAAA,kBAEjD,gBAAA6C,GAAA,OAAAiF,EAAA9G,MAAA,KAAAC,UAAA,EAbQ,KAgBb,OACI3C,cAAA,OAAK0E,UAAU,0DAAyDvF,SACpEa,cAACkI,IAAI,CAACyB,MAAO,CAAEC,MAAO,QAASC,QAAS,OAAQC,UAAW,mCAAoC3K,SAC3FsF,eAAC0D,IAAQ,CAAAhJ,SAAA,CACLa,cAAA,MAAI0E,UAAU,cAAavF,SAAC,YAC5BsF,eAAA,QAAM4D,SAAUY,EAAOc,aAAa5K,SAAA,CAChCsF,eAAA,OAAKC,UAAU,kBAAiBvF,SAAA,CAC5Ba,cAAA,SAAAb,SAAO,UACPa,cAAA,SACIyI,KAAK,OACL/D,UAAS,gBAAAxC,OAAkB+G,EAAOe,OAAOrF,KAAO,aAAe,IAC/DA,KAAK,OACLzE,MAAO+I,EAAOQ,OAAO9E,KACrBI,SAAUkE,EAAOgB,aACjBvB,YAAY,oBAEfO,EAAOe,OAAOrF,MAAQ3E,cAAA,KAAG0E,UAAU,cAAavF,SAAE8J,EAAOe,OAAOrF,UAErEF,eAAA,OAAKC,UAAU,kBAAiBvF,SAAA,CAC5Ba,cAAA,SAAAb,SAAO,WACPa,cAAA,SACIyI,KAAK,QACL/D,UAAS,gBAAAxC,OAAkB+G,EAAOe,OAAO9E,MAAQ,aAAe,IAChEP,KAAK,QACLzE,MAAO+I,EAAOQ,OAAOvE,MACrBH,SAAUkE,EAAOgB,aACjBvB,YAAY,qBAEfO,EAAOe,OAAO9E,OAASlF,cAAA,KAAG0E,UAAU,cAAavF,SAAE8J,EAAOe,OAAO9E,WAEtET,eAAA,OAAKC,UAAU,kBAAiBvF,SAAA,CAC5Ba,cAAA,SAAAb,SAAO,cACPa,cAAA,SACIyI,KAAK,WACL/D,UAAS,gBAAAxC,OAAkB+G,EAAOe,OAAOZ,SAAW,aAAe,IACnEzE,KAAK,WACLzE,MAAO+I,EAAOQ,OAAOL,SACrBrE,SAAUkE,EAAOgB,aACjBvB,YAAY,wBAEfO,EAAOe,OAAOZ,UAAYpJ,cAAA,KAAG0E,UAAU,cAAavF,SAAE8J,EAAOe,OAAOZ,cAEzEpJ,cAAC8H,IAAS,CAACpD,UAAU,mBAAkBvF,SACnCa,cAAA,UAAQyI,KAAK,SAAS/D,UAAU,kBAAiBvF,SAAC,iBAG1DsF,eAAA,KAAGC,UAAU,mBAAkBvF,SAAA,CAAC,4BACHa,cAAA,UAAQ0E,UAAU,eAAeuD,QAAS,kBAAM/G,EAAQE,KAAK,SAAS,EAACjC,SAAC,wBAMzH,EClEMoM,EAAM,WACV,IAAAC,EAAyBvK,qBAAWlC,GAA5BS,EAAIgM,EAAJhM,KAAMe,EAAMiL,EAANjL,OACRW,EAAUC,cAOhB,OAwBEnB,aAvBA,CAuBA,OAAK0E,UAAU,iDAAgDvF,SAC7DsF,eAAA,OAAKC,UAAU,kBAAiBvF,SAAA,CAC9Ba,cAACyL,IAAI,CAAC/G,UAAU,eAAegH,GAAG,IAAGvM,SAAC,oBACtCa,cAAA,UACE0E,UAAU,iBACV+D,KAAK,SACL,iBAAe,WACf,iBAAe,aACf,gBAAc,YACd,gBAAc,QACd,aAAW,oBAAmBtJ,SAE9Ba,cAAA,QAAM0E,UAAU,0BAElB1E,cAAA,OAAK0E,UAAU,2BAA2BvC,GAAG,YAAWhD,SACtDsF,eAAA,MAAIC,UAAU,qBAAoBvF,SAAA,CAChCa,cAAA,MAAI0E,UAAU,WAAUvF,SACtBa,cAACyL,IAAI,CAAC/G,UAAU,kBAAkBgH,GAAG,IAAGvM,SAAC,gBAE1CK,EACCiF,eAAAkH,WAAA,CAAAxM,SAAA,CACEa,cAAA,MAAI0E,UAAU,WAAUvF,SACtBa,cAACyL,IAAI,CAAC/G,UAAU,WAAWgH,GAAG,YAAWvM,SAAC,eAE5Ca,cAAA,MAAI0E,UAAU,WAAUvF,SACtBa,cAAA,UAAQ0E,UAAU,sBAAsBuD,QAtDnC,WACnB1H,IACAW,EAAQE,KAAK,SACf,EAmD8EjC,SAAC,gBAInEa,cAAA,MAAI0E,UAAU,WAAUvF,SACtBa,cAACyL,IAAI,CAAC/G,UAAU,WAAWgH,GAAG,SAAQvM,SAAC,qBAQvD,EAEeyM,EA3FH,WACV,OACE5L,cAACf,EAAY,CAAAE,SACXa,cAAC6L,IAAM,CAAA1M,SACLsF,eAAA,OAAKC,UAAU,MAAKvF,SAAA,CAClBa,cAACuL,EAAG,IACJ9G,eAACqH,IAAM,CAAA3M,SAAA,CACLa,cAAC+L,IAAK,CAACC,KAAK,IAAIC,OAAK,EAACC,UAAW/G,IACjCnF,cAAC+L,IAAK,CAACC,KAAK,SAASE,UAAWlD,IAChChJ,cAAC+L,IAAK,CAACC,KAAK,UAAUE,UAAWZ,IACjCtL,cAAC+L,IAAK,CAACC,KAAK,YAAYE,UAAWhC,aAM/C,ECpBAiC,IAASC,OACPpM,cAAC4L,EAAG,IACJS,SAASC,eAAe,Q","file":"static/js/main.9586de71.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nconst UserContext = createContext();\r\n\r\nconst UserProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const loggedInUser = JSON.parse(localStorage.getItem('user'));\r\n        if (loggedInUser) {\r\n            setUser(loggedInUser);\r\n        }\r\n    }, []);\r\n\r\n    const login = (userData) => {\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        setUser(userData);\r\n    };\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('user');\r\n        setUser(null);\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider value={{ user, login, logout }}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    );\r\n};\r\n\r\nexport { UserProvider, UserContext };\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { UserContext } from '../../context/UserContext';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst ScrumDetails = ({ scrum }) => {\r\n    const [tasks, setTasks] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const { user } = useContext(UserContext);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const checkUser = () => {\r\n            const loggedInUser = JSON.parse(localStorage.getItem('user'));\r\n            if (!loggedInUser) {\r\n                history.push('/login');\r\n            }\r\n        };\r\n\r\n        checkUser();\r\n    }, [history]);\r\n\r\n    useEffect(() => {\r\n        const fetchTasks = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:4000/tasks?scrumId=${scrum.id}`);\r\n                setTasks(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching tasks:', error);\r\n            }\r\n        };\r\n\r\n        fetchTasks();\r\n    }, [scrum.id]);\r\n\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:4000/users');\r\n                const scrumUsers = response.data.filter(user => tasks.some(task => task.assignedTo === user.id));\r\n                setUsers(scrumUsers);\r\n            } catch (error) {\r\n                console.error('Error fetching users:', error);\r\n            }\r\n        };\r\n\r\n        if (tasks.length > 0) {\r\n            fetchUsers();\r\n        }\r\n    }, [tasks]);\r\n\r\n    const handleStatusChange = async (taskId, newStatus) => {\r\n        try {\r\n            await axios.patch(`http://localhost:4000/tasks/${taskId}`, {\r\n                status: newStatus,\r\n                history: [\r\n                    ...tasks.find(task => task.id === taskId).history,\r\n                    {\r\n                        status: newStatus,\r\n                        date: new Date().toISOString().split('T')[0],\r\n                    },\r\n                ],\r\n            });\r\n\r\n            setTasks(prevTasks =>\r\n                prevTasks.map(task =>\r\n                    task.id === taskId ? { ...task, status: newStatus } : task\r\n                )\r\n            );\r\n        } catch (error) {\r\n            console.error('Error updating task status:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-6 bg-white rounded-2xl shadow-xl\">\r\n            <h3 className=\"text-2xl font-bold mb-4\">Scrum Details for {scrum.name}</h3>\r\n            <h4 className=\"text-xl font-semibold mb-2\">Tasks</h4>\r\n            <ul className=\"space-y-2\">\r\n                {tasks.map(task => (\r\n                    <li key={task.id} className=\"p-4 bg-gray-100 rounded-xl shadow-md\">\r\n                        <strong>{task.title}:</strong> {task.description} - <em>{task.status}</em>\r\n                        {user?.role === 'admin' && (\r\n                            <select\r\n                                className=\"ml-4 p-1 rounded-md border border-gray-300\"\r\n                                value={task.status}\r\n                                onChange={(e) => handleStatusChange(task.id, e.target.value)}\r\n                            >\r\n                                <option value=\"To Do\">To Do</option>\r\n                                <option value=\"In Progress\">In Progress</option>\r\n                                <option value=\"Done\">Done</option>\r\n                            </select>\r\n                        )}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <h4 className=\"text-xl font-semibold mt-6 mb-2\">Users</h4>\r\n            <ul className=\"space-y-2\">\r\n                {users.map(user => (\r\n                    <li key={user.id} className=\"p-4 bg-gray-100 rounded-xl shadow-md\">\r\n                        {user.name} ({user.email})\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScrumDetails;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport ScrumDetails from '../Scrum Details/ScrumDetails';\r\nimport { UserContext } from '../../context/UserContext';\r\nimport { Button, Card, CardBody, Form, FormGroup, Label, Input, Container, Row, Col, ListGroup, ListGroupItem } from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst Dashboard = () => {\r\n\r\n      // State variables for storing scrums, selected scrum, form visibility, and users list\r\n    const [scrums, setScrums] = useState([]);\r\n    const [selectedScrum, setSelectedScrum] = useState(null);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [users, setUsers] = useState([]);\r\n    const [newScrumName, setNewScrumName] = useState('');\r\n    const [newTaskTitle, setNewTaskTitle] = useState('');\r\n    const [newTaskDescription, setNewTaskDescription] = useState('');\r\n    const [newTaskStatus, setNewTaskStatus] = useState('To Do');\r\n    const [newTaskAssignedTo, setNewTaskAssignedTo] = useState('');\r\n    const { user } = useContext(UserContext);\r\n\r\n\r\n    //Fetching Scrums and Users on Component Mount\r\n    useEffect(() => {\r\n        const fetchScrums = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:4000/scrums');\r\n                setScrums(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching scrums:', error);\r\n            }\r\n        };\r\n\r\n        const fetchUsers = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:4000/users');\r\n                setUsers(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching users:', error);\r\n            }\r\n        };\r\n\r\n        fetchScrums(); // Fetch scrums when component loads\r\n        fetchUsers();  // Fetch users when component loads\r\n    }, []);\r\n\r\n\r\n    //Get Details of a Specific Scrum\r\n    const handleGetDetails = async (scrumId) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:4000/scrums/${scrumId}`);\r\n            setSelectedScrum(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching scrum details:', error);\r\n        }\r\n    };\r\n\r\n    const handleAddScrum = async (event) => {\r\n        event.preventDefault(); //Stops the default browser behavior of refreshing the page when a form is submitted.\r\n        try {\r\n            // Add new Scrum\r\n            const newScrumResponse = await axios.post('http://localhost:4000/scrums', {\r\n                name: newScrumName,\r\n            });\r\n\r\n            const newScrum = newScrumResponse.data;\r\n\r\n            // Add new Task\r\n            await axios.post('http://localhost:4000/tasks', {\r\n                title: newTaskTitle,\r\n                description: newTaskDescription,\r\n                status: newTaskStatus,\r\n                scrumId: newScrum.id,\r\n                assignedTo: newTaskAssignedTo,\r\n                history: [\r\n                    {\r\n                        status: newTaskStatus,\r\n                        date: new Date().toISOString().split('T')[0],\r\n                    },\r\n                ],\r\n            });\r\n\r\n            const updatedScrums = await axios.get('http://localhost:4000/scrums');\r\n            setScrums(updatedScrums.data);\r\n            setShowForm(false); // Hide the form after submission\r\n            setNewScrumName('');\r\n            setNewTaskTitle('');\r\n            setNewTaskDescription('');\r\n            setNewTaskStatus('To Do');\r\n            setNewTaskAssignedTo('');\r\n        } catch (error) {\r\n            console.error('Error adding scrum:', error);\r\n        }\r\n\r\n        /*The handleAddScrum function:\r\n\r\nPrevents default form submission.\r\nSends a POST request to add a new scrum.\r\nAdds an associated task linked to that scrum.\r\nFetches and updates the list of scrums after addition.\r\nResets the form and hides it.\r\nHandles any errors during the process. */\r\n    };\r\n\r\n    return (\r\n        <Container className=\"mt-5\">\r\n            <h2 className=\"text-center mb-4\">Scrum Teams</h2>\r\n            {user?.role === 'admin' && (\r\n                <div className=\"text-center mb-3\">\r\n                    <Button color=\"primary\" onClick={() => setShowForm(!showForm)}>\r\n                        {showForm ? 'Cancel' : 'Add New Scrum'}\r\n                    </Button>\r\n                    {showForm && (\r\n                        <Card className=\"mt-4\">\r\n                            <CardBody>\r\n                                <Form onSubmit={handleAddScrum}>\r\n                                    <FormGroup>\r\n                                        <Label>Scrum Name:</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            placeholder=\"Enter scrum name\"\r\n                                            value={newScrumName}\r\n                                            onChange={(e) => setNewScrumName(e.target.value)}\r\n                                            required\r\n                                        />\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>Task Title:</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            placeholder=\"Enter task title\"\r\n                                            value={newTaskTitle}\r\n                                            onChange={(e) => setNewTaskTitle(e.target.value)}\r\n                                            required\r\n                                        />\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>Task Description:</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            placeholder=\"Enter task description\"\r\n                                            value={newTaskDescription}\r\n                                            onChange={(e) => setNewTaskDescription(e.target.value)}\r\n                                            required\r\n                                        />\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>Task Status:</Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            value={newTaskStatus}\r\n                                            onChange={(e) => setNewTaskStatus(e.target.value)}\r\n                                            required\r\n                                        >\r\n                                            <option value=\"To Do\">To Do</option>\r\n                                            <option value=\"In Progress\">In Progress</option>\r\n                                            <option value=\"Done\">Done</option>\r\n                                        </Input>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label>Assign To:</Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            value={newTaskAssignedTo}\r\n                                            onChange={(e) => setNewTaskAssignedTo(e.target.value)}\r\n                                            required\r\n                                        >\r\n                                            <option value=\"\">Select a user</option>\r\n                                            {users.map((user) => (\r\n                                                <option key={user.id} value={user.id}>\r\n                                                    {user.name} ({user.email})\r\n                                                </option>\r\n                                            ))}\r\n                                        </Input>\r\n                                    </FormGroup>\r\n                                    <Button type=\"submit\" color=\"success\" block>Create Scrum</Button>\r\n                                </Form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    )}\r\n                </div>\r\n            )}\r\n            <Row className=\"mt-4\">\r\n                {scrums.map((scrum) => (\r\n                    <Col md={4} key={scrum.id} className=\"mb-4\">\r\n                        <Card>\r\n                            <CardBody>\r\n                                <h5>{scrum.name}</h5>\r\n                                <Button color=\"info\" onClick={() => handleGetDetails(scrum.id)}>\r\n                                    Get Details\r\n                                </Button>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                ))}\r\n            </Row>\r\n            {selectedScrum && <ScrumDetails scrum={selectedScrum} />}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { useContext } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { UserContext } from '../../context/UserContext';\r\nimport { Card, CardBody, Container } from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst Login = () => {\r\n    const history = useHistory();\r\n    const { login } = useContext(UserContext);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .matches(/@/, 'Email must contain @')\r\n                .required('Email is required')\r\n                .email('Invalid email format'),\r\n            password: Yup.string().required('Password is required')\r\n        }),\r\n        onSubmit: async (values) => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:4000/users?email=${values.email}&password=${values.password}`);\r\n                if (response.data.length > 0) {\r\n                    const user = response.data[0];\r\n                    login(user);\r\n                    history.push(user.role === 'admin' ? '/' : '/profiles');\r\n                } else {\r\n                    alert('Invalid email or password');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error logging in:', error);\r\n            }\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"d-flex justify-content-center align-items-center vh-100\">\r\n            <Card style={{ width: \"400px\", padding: \"20px\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\" }}>\r\n                <CardBody>\r\n                    <h2 className=\"text-center\">Login</h2>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <label>Email:</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                className={`form-control ${formik.errors.email ? 'is-invalid' : ''}`}\r\n                                value={formik.values.email}\r\n                                onChange={formik.handleChange}\r\n                                placeholder=\"Enter your email\"\r\n                            />\r\n                            {formik.errors.email && <p className=\"text-danger\">{formik.errors.email}</p>}\r\n                        </div>\r\n                        <div className=\"form-group mt-3\">\r\n                            <label>Password:</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                className={`form-control ${formik.errors.password ? 'is-invalid' : ''}`}\r\n                                value={formik.values.password}\r\n                                onChange={formik.handleChange}\r\n                                placeholder=\"Enter your password\"\r\n                            />\r\n                            {formik.errors.password && <p className=\"text-danger\">{formik.errors.password}</p>}\r\n                        </div>\r\n                        <Container className=\"text-center mt-4\">\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Login</button>\r\n                        </Container>\r\n                    </form>\r\n                    <p className=\"text-center mt-3\">\r\n                        Don't have an account? <button className=\"btn btn-link\" onClick={() => history.push('/signup')}>Sign Up</button>\r\n                    </p>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { UserContext } from '../../context/UserContext';\r\nimport { Card, Button, Form, InputGroup, Container, ListGroup } from 'react-bootstrap';\r\n\r\nconst UserProfile = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [tasks, setTasks] = useState([]);\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [newUserName, setNewUserName] = useState('');\r\n    const [newUserEmail, setNewUserEmail] = useState('');\r\n    const [newUserPassword, setNewUserPassword] = useState('');\r\n    const [newUserRole, setNewUserRole] = useState('employee');\r\n    const { user } = useContext(UserContext);\r\n\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:4000/users');\r\n                if (user?.role === 'admin') {\r\n                    setUsers(response.data.filter(user => user?.role !== 'admin'));\r\n                } else {\r\n                    setSelectedUser(user);\r\n                    fetchTasks(user?.id);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching users:', error);\r\n            }\r\n        };\r\n        fetchUsers();\r\n    }, [user]);\r\n\r\n    const fetchTasks = async (userId) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:4000/tasks?assignedTo=${userId}`);\r\n            setTasks(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching tasks:', error);\r\n        }\r\n    };\r\n\r\n\r\n    /*Sets the selected user when the \"Get History\" button is clicked.\r\nFetches tasks related to the selected user. */\r\n    const handleGetHistory = (userId) => {\r\n        setSelectedUser(users.find(user => user?.id === userId));\r\n        fetchTasks(userId);\r\n    };\r\n\r\n    const handleAddUser = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            await axios.post('http://localhost:4000/users', {\r\n                name: newUserName,\r\n                email: newUserEmail,\r\n                password: newUserPassword,\r\n                role: newUserRole,\r\n            });\r\n            const updatedUsers = await axios.get('http://localhost:4000/users');\r\n            setUsers(updatedUsers.data.filter(user => user?.role !== 'admin'));\r\n            setShowForm(false);\r\n            setNewUserName('');\r\n            setNewUserEmail('');\r\n            setNewUserPassword('');\r\n            setNewUserRole('employee');\r\n        } catch (error) {\r\n            console.error('Error adding user:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container className=\"py-5\">\r\n            <h2 className=\"text-center mb-4\">User Profiles</h2>\r\n            {user?.role === 'admin' && (\r\n                <Card className=\"p-4 mb-4 shadow-lg\">\r\n                    <Button onClick={() => setShowForm(!showForm)} className=\"mb-3 btn-info\">\r\n                        {showForm ? 'Cancel' : 'Add New User'}\r\n                    </Button>\r\n                    {showForm && (\r\n                        <Form onSubmit={handleAddUser} className=\"mb-4\">\r\n                            <InputGroup className=\"mb-3\">\r\n                                <Form.Control placeholder=\"Name\" value={newUserName} onChange={(e) => setNewUserName(e.target.value)} required />\r\n                            </InputGroup>\r\n                            <InputGroup className=\"mb-3\">\r\n                                <Form.Control placeholder=\"Email\" type=\"email\" value={newUserEmail} onChange={(e) => setNewUserEmail(e.target.value)} required />\r\n                            </InputGroup>\r\n                            <InputGroup className=\"mb-3\">\r\n                                <Form.Control placeholder=\"Password\" type=\"password\" value={newUserPassword} onChange={(e) => setNewUserPassword(e.target.value)} required />\r\n                            </InputGroup>\r\n                            <InputGroup className=\"mb-3\">\r\n                                <Form.Select value={newUserRole} onChange={(e) => setNewUserRole(e.target.value)} required>\r\n                                    <option value=\"employee\">Employee</option>\r\n                                    <option value=\"admin\">Admin</option>\r\n                                </Form.Select>\r\n                            </InputGroup>\r\n                            <Button type=\"submit\" variant=\"success\">Create User</Button>\r\n                        </Form>\r\n                    )}\r\n                    <ListGroup>\r\n                        {users.map(user => (\r\n                            <ListGroup.Item key={user?.id} className=\"d-flex justify-content-between align-items-center\">\r\n                                {user?.name} - {user?.email}\r\n                                <Button variant=\"primary\" onClick={() => handleGetHistory(user?.id)}>Get History</Button>\r\n                            </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n                </Card>\r\n            )}\r\n            {selectedUser && (\r\n                <Card className=\"p-4 mt-4 shadow-lg\">\r\n                    <h3>Tasks Worked By {selectedUser.name}</h3>\r\n                    <ListGroup>\r\n                        {tasks.map(task => (\r\n                            <ListGroup.Item key={task.id} className=\"d-flex justify-content-between align-items-center\">\r\n                                <strong>{task.title}</strong> - {task.description} (Status: {task.status})\r\n                            </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n                </Card>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default UserProfile;\r\n","import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Card, CardBody, Container } from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst SignUp = () => {\r\n    const history = useHistory();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validationSchema: Yup.object({\r\n            name: Yup.string().required('Name is required'),\r\n            email: Yup.string()\r\n                .matches(/@/, 'Email must contain @')\r\n                .required('Email is required')\r\n                .email('Invalid email format'),\r\n            password: Yup.string().required('Password is required')\r\n        }),\r\n        onSubmit: async (values) => {\r\n            try {\r\n                await axios.post('http://localhost:4000/users', {\r\n                    name: values.name,\r\n                    email: values.email,\r\n                    password: values.password,\r\n                    role: 'employee'\r\n                });\r\n                alert('signup successful');\r\n                history.push('/login');\r\n            } catch (error) {\r\n                console.error('Error signing up:', error);\r\n            }\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"d-flex justify-content-center align-items-center vh-100\">\r\n            <Card style={{ width: \"400px\", padding: \"20px\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\" }}>\r\n                <CardBody>\r\n                    <h2 className=\"text-center\">Sign Up</h2>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <div className=\"form-group my-4\">\r\n                            <label>Name:</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className={`form-control ${formik.errors.name ? 'is-invalid' : ''}`}\r\n                                name=\"name\"\r\n                                value={formik.values.name}\r\n                                onChange={formik.handleChange}\r\n                                placeholder=\"Enter your name\"\r\n                            />\r\n                            {formik.errors.name && <p className=\"text-danger\">{formik.errors.name}</p>}\r\n                        </div>\r\n                        <div className=\"form-group my-4\">\r\n                            <label>Email:</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                className={`form-control ${formik.errors.email ? 'is-invalid' : ''}`}\r\n                                name=\"email\"\r\n                                value={formik.values.email}\r\n                                onChange={formik.handleChange}\r\n                                placeholder=\"Enter your email\"\r\n                            />\r\n                            {formik.errors.email && <p className=\"text-danger\">{formik.errors.email}</p>}\r\n                        </div>\r\n                        <div className=\"form-group my-4\">\r\n                            <label>Password:</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                className={`form-control ${formik.errors.password ? 'is-invalid' : ''}`}\r\n                                name=\"password\"\r\n                                value={formik.values.password}\r\n                                onChange={formik.handleChange}\r\n                                placeholder=\"Enter your password\"\r\n                            />\r\n                            {formik.errors.password && <p className=\"text-danger\">{formik.errors.password}</p>}\r\n                        </div>\r\n                        <Container className=\"text-center mt-4\">\r\n                            <button type=\"submit\" className=\"btn btn-success\">Sign Up</button>\r\n                        </Container>\r\n                    </form>\r\n                    <p className=\"text-center mt-3\">\r\n                        Already have an account? <button className=\"btn btn-link\" onClick={() => history.push('/login')}>Login here</button>\r\n                    </p>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n","import React, { useContext } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link, useHistory } from 'react-router-dom';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport Login from './components/Login/Login';\nimport UserProfile from './components/UserProfile/UserProfile';\nimport SignUp from './components/Signup/SignUp';\nimport { UserProvider, UserContext } from '../src/context/UserContext';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst App = () => {\n  return (\n    <UserProvider>\n      <Router>\n        <div className=\"app\">\n          <Nav />\n          <Switch>\n            <Route path=\"/\" exact component={Dashboard} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/signup\" component={SignUp} />\n            <Route path=\"/profiles\" component={UserProfile} />\n          </Switch>\n        </div>\n      </Router>\n    </UserProvider>\n  );\n};\n\nconst Nav = () => {\n  const { user, logout } = useContext(UserContext);\n  const history = useHistory();\n\n  const handleLogout = () => {\n    logout();\n    history.push('/login');\n  };\n\n  return (\n    // <nav>\n    //   <ul>\n    //     <li>\n    //       <Link to=\"/\">Dashboard</Link>\n    //     </li>\n    //     {user ? (\n    //       <>\n    //         <li>\n    //           <Link to=\"/profiles\">Profiles</Link>\n    //         </li>\n    //         <li>\n    //           <button onClick={handleLogout}>Logout</button>\n    //         </li>\n    //       </>\n    //     ) : (\n    //       <>\n    //         <li>\n    //           <Link to=\"/login\">Login</Link>\n    //         </li>\n    //       </>\n    //     )}\n    //   </ul>\n    // </nav>\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <div className=\"container-fluid\">\n        <Link className=\"navbar-brand\" to=\"/\">Scrum Dashboard</Link>\n        <button \n          className=\"navbar-toggler\" \n          type=\"button\" \n          data-bs-toggle=\"collapse\" \n          data-bs-target=\"#navbarNav\" \n          aria-controls=\"navbarNav\" \n          aria-expanded=\"false\" \n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav ms-auto\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link active\" to=\"/\">Dashboard</Link>\n            </li>\n            {user ? (\n              <>\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link\" to=\"/profiles\">Profiles</Link>\n                </li>\n                <li className=\"nav-item\">\n                  <button className=\"btn btn-danger ms-2\" onClick={handleLogout}>Logout</button>\n                </li>\n              </>\n            ) : (\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/login\">Login</Link>\n              </li>\n            )}  \n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}